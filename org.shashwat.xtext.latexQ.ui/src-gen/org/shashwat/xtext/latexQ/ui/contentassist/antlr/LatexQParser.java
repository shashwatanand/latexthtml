/*
 * generated by Xtext
 */
package org.shashwat.xtext.latexQ.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.shashwat.xtext.latexQ.services.LatexQGrammarAccess;

public class LatexQParser extends AbstractContentAssistParser {
	
	@Inject
	private LatexQGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal.InternalLatexQParser createParser() {
		org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal.InternalLatexQParser result = new org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal.InternalLatexQParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getQuestionPaperAccess().getGroup(), "rule__QuestionPaper__Group__0");
					put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
					put(grammarAccess.getAnswerAccess().getGroup(), "rule__Answer__Group__0");
					put(grammarAccess.getQuestionPaperAccess().getPapernameAssignment_1(), "rule__QuestionPaper__PapernameAssignment_1");
					put(grammarAccess.getQuestionPaperAccess().getQuestionsAssignment_2(), "rule__QuestionPaper__QuestionsAssignment_2");
					put(grammarAccess.getQuestionAccess().getQuestionAssignment_1(), "rule__Question__QuestionAssignment_1");
					put(grammarAccess.getQuestionAccess().getTypeAssignment_2(), "rule__Question__TypeAssignment_2");
					put(grammarAccess.getQuestionAccess().getAnswersAssignment_4(), "rule__Question__AnswersAssignment_4");
					put(grammarAccess.getAnswerAccess().getAnswerAssignment_1(), "rule__Answer__AnswerAssignment_1");
					put(grammarAccess.getCHECKAccess().getCheckAssignment(), "rule__CHECK__CheckAssignment");
					put(grammarAccess.getRADIOAccess().getRadioAssignment(), "rule__RADIO__RadioAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal.InternalLatexQParser typedParser = (org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal.InternalLatexQParser) parser;
			typedParser.entryRuleQuestionPaper();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LatexQGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LatexQGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
