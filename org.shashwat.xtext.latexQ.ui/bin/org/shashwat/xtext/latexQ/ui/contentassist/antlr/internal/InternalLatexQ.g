/*
 * generated by Xtext
 */
grammar InternalLatexQ;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.shashwat.xtext.latexQ.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.shashwat.xtext.latexQ.services.LatexQGrammarAccess;

}

@parser::members {
 
 	private LatexQGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LatexQGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleQuestionPaper
entryRuleQuestionPaper 
:
{ before(grammarAccess.getQuestionPaperRule()); }
	 ruleQuestionPaper
{ after(grammarAccess.getQuestionPaperRule()); } 
	 EOF 
;

// Rule QuestionPaper
ruleQuestionPaper
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuestionPaperAccess().getGroup()); }
(rule__QuestionPaper__Group__0)
{ after(grammarAccess.getQuestionPaperAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuestion
entryRuleQuestion 
:
{ before(grammarAccess.getQuestionRule()); }
	 ruleQuestion
{ after(grammarAccess.getQuestionRule()); } 
	 EOF 
;

// Rule Question
ruleQuestion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuestionAccess().getGroup()); }
(rule__Question__Group__0)
{ after(grammarAccess.getQuestionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnswer
entryRuleAnswer 
:
{ before(grammarAccess.getAnswerRule()); }
	 ruleAnswer
{ after(grammarAccess.getAnswerRule()); } 
	 EOF 
;

// Rule Answer
ruleAnswer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnswerAccess().getGroup()); }
(rule__Answer__Group__0)
{ after(grammarAccess.getAnswerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCHECK
entryRuleCHECK 
:
{ before(grammarAccess.getCHECKRule()); }
	 ruleCHECK
{ after(grammarAccess.getCHECKRule()); } 
	 EOF 
;

// Rule CHECK
ruleCHECK
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCHECKAccess().getCheckAssignment()); }
(rule__CHECK__CheckAssignment)
{ after(grammarAccess.getCHECKAccess().getCheckAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRADIO
entryRuleRADIO 
:
{ before(grammarAccess.getRADIORule()); }
	 ruleRADIO
{ after(grammarAccess.getRADIORule()); } 
	 EOF 
;

// Rule RADIO
ruleRADIO
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRADIOAccess().getRadioAssignment()); }
(rule__RADIO__RadioAssignment)
{ after(grammarAccess.getRADIOAccess().getRadioAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCHECKParserRuleCall_0()); }
	ruleCHECK
{ after(grammarAccess.getTypeAccess().getCHECKParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRADIOParserRuleCall_1()); }
	ruleRADIO
{ after(grammarAccess.getTypeAccess().getRADIOParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__QuestionPaper__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuestionPaper__Group__0__Impl
	rule__QuestionPaper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuestionPaper__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionPaperAccess().getPapernameKeyword_0()); }

	'papername' 

{ after(grammarAccess.getQuestionPaperAccess().getPapernameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuestionPaper__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuestionPaper__Group__1__Impl
	rule__QuestionPaper__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuestionPaper__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionPaperAccess().getPapernameAssignment_1()); }
(rule__QuestionPaper__PapernameAssignment_1)
{ after(grammarAccess.getQuestionPaperAccess().getPapernameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuestionPaper__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuestionPaper__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuestionPaper__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionPaperAccess().getQuestionsAssignment_2()); }
(rule__QuestionPaper__QuestionsAssignment_2)*
{ after(grammarAccess.getQuestionPaperAccess().getQuestionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Question__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__0__Impl
	rule__Question__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getQuestionKeyword_0()); }

	'Question' 

{ after(grammarAccess.getQuestionAccess().getQuestionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__1__Impl
	rule__Question__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getQuestionAssignment_1()); }
(rule__Question__QuestionAssignment_1)
{ after(grammarAccess.getQuestionAccess().getQuestionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__2__Impl
	rule__Question__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__3__Impl
	rule__Question__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getTypeAssignment_3()); }
(rule__Question__TypeAssignment_3)
{ after(grammarAccess.getQuestionAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__4__Impl
	rule__Question__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
(rule__Question__AnswersAssignment_4)
{ after(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
)
(
{ before(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
(rule__Question__AnswersAssignment_4)*
{ after(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Answer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Answer__Group__0__Impl
	rule__Answer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getAnswerKeyword_0()); }

	'Answer' 

{ after(grammarAccess.getAnswerAccess().getAnswerKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Answer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Answer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getAnswerAssignment_1()); }
(rule__Answer__AnswerAssignment_1)
{ after(grammarAccess.getAnswerAccess().getAnswerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__QuestionPaper__PapernameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionPaperAccess().getPapernameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getQuestionPaperAccess().getPapernameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuestionPaper__QuestionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionPaperAccess().getQuestionsQuestionParserRuleCall_2_0()); }
	ruleQuestion{ after(grammarAccess.getQuestionPaperAccess().getQuestionsQuestionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Question__QuestionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getQuestionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getQuestionAccess().getQuestionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Question__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getQuestionAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Question__AnswersAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getAnswersAnswerParserRuleCall_4_0()); }
	ruleAnswer{ after(grammarAccess.getQuestionAccess().getAnswersAnswerParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__AnswerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getAnswerSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAnswerAccess().getAnswerSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CHECK__CheckAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCHECKAccess().getCheckCheckKeyword_0()); }
(
{ before(grammarAccess.getCHECKAccess().getCheckCheckKeyword_0()); }

	'check' 

{ after(grammarAccess.getCHECKAccess().getCheckCheckKeyword_0()); }
)

{ after(grammarAccess.getCHECKAccess().getCheckCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RADIO__RadioAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRADIOAccess().getRadioRadioKeyword_0()); }
(
{ before(grammarAccess.getRADIOAccess().getRadioRadioKeyword_0()); }

	'radio' 

{ after(grammarAccess.getRADIOAccess().getRadioRadioKeyword_0()); }
)

{ after(grammarAccess.getRADIOAccess().getRadioRadioKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


