/**
 * generated by Xtext
 */
package org.shashwat.xtext.latexQ.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.shashwat.xtext.latexQ.latexQ.QuestionPaper;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LatexQGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<QuestionPaper> _filter = Iterables.<QuestionPaper>filter(_iterable, QuestionPaper.class);
    for (final QuestionPaper e : _filter) {
      String _papername = e.getPapername();
      String _plus = (_papername + ".html");
      CharSequence _compile = this.compile(e);
      fsa.generateFile(_plus, _compile);
    }
  }
  
  public CharSequence compile(final QuestionPaper qp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link></link>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
}
