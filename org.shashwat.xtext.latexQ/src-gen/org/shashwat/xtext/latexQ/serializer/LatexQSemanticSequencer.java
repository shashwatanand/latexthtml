/*
 * generated by Xtext
 */
package org.shashwat.xtext.latexQ.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.shashwat.xtext.latexQ.latexQ.Answer;
import org.shashwat.xtext.latexQ.latexQ.CHECK;
import org.shashwat.xtext.latexQ.latexQ.LatexQPackage;
import org.shashwat.xtext.latexQ.latexQ.Question;
import org.shashwat.xtext.latexQ.latexQ.QuestionPaper;
import org.shashwat.xtext.latexQ.latexQ.RADIO;
import org.shashwat.xtext.latexQ.services.LatexQGrammarAccess;

@SuppressWarnings("all")
public class LatexQSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LatexQGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LatexQPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LatexQPackage.ANSWER:
				sequence_Answer(context, (Answer) semanticObject); 
				return; 
			case LatexQPackage.CHECK:
				sequence_CHECK(context, (CHECK) semanticObject); 
				return; 
			case LatexQPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case LatexQPackage.QUESTION_PAPER:
				sequence_QuestionPaper(context, (QuestionPaper) semanticObject); 
				return; 
			case LatexQPackage.RADIO:
				sequence_RADIO(context, (RADIO) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Answer returns Answer
	 *
	 * Constraint:
	 *     answer=STRING
	 */
	protected void sequence_Answer(ISerializationContext context, Answer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.ANSWER__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.ANSWER__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnswerAccess().getAnswerSTRINGTerminalRuleCall_1_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns CHECK
	 *     CHECK returns CHECK
	 *
	 * Constraint:
	 *     check?='check'
	 */
	protected void sequence_CHECK(ISerializationContext context, CHECK semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.CHECK__CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.CHECK__CHECK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCHECKAccess().getCheckCheckKeyword_0(), semanticObject.isCheck());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QuestionPaper returns QuestionPaper
	 *
	 * Constraint:
	 *     (papername=ID questions+=Question*)
	 */
	protected void sequence_QuestionPaper(ISerializationContext context, QuestionPaper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (question=STRING type=Type answers+=Answer+)
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns RADIO
	 *     RADIO returns RADIO
	 *
	 * Constraint:
	 *     radio?='radio'
	 */
	protected void sequence_RADIO(ISerializationContext context, RADIO semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.RADIO__RADIO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.RADIO__RADIO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRADIOAccess().getRadioRadioKeyword_0(), semanticObject.isRadio());
		feeder.finish();
	}
	
	
}
