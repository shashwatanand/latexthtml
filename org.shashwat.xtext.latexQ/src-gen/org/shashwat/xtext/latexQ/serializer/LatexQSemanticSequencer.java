/*
 * generated by Xtext
 */
package org.shashwat.xtext.latexQ.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.shashwat.xtext.latexQ.latexQ.Answer;
import org.shashwat.xtext.latexQ.latexQ.CHECK;
import org.shashwat.xtext.latexQ.latexQ.LatexQPackage;
import org.shashwat.xtext.latexQ.latexQ.Question;
import org.shashwat.xtext.latexQ.latexQ.QuestionPaper;
import org.shashwat.xtext.latexQ.latexQ.RADIO;
import org.shashwat.xtext.latexQ.services.LatexQGrammarAccess;

@SuppressWarnings("all")
public class LatexQSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LatexQGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == LatexQPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case LatexQPackage.ANSWER:
				sequence_Answer(context, (Answer) semanticObject); 
				return; 
			case LatexQPackage.CHECK:
				sequence_CHECK(context, (CHECK) semanticObject); 
				return; 
			case LatexQPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case LatexQPackage.QUESTION_PAPER:
				sequence_QuestionPaper(context, (QuestionPaper) semanticObject); 
				return; 
			case LatexQPackage.RADIO:
				sequence_RADIO(context, (RADIO) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (answer=STRING type=Type)
	 */
	protected void sequence_Answer(EObject context, Answer semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.ANSWER__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.ANSWER__ANSWER));
			if(transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.ANSWER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.ANSWER__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAnswerAccess().getAnswerSTRINGTerminalRuleCall_1_0(), semanticObject.getAnswer());
		feeder.accept(grammarAccess.getAnswerAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     check?='check'
	 */
	protected void sequence_CHECK(EObject context, CHECK semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.CHECK__CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.CHECK__CHECK));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCHECKAccess().getCheckCheckKeyword_0(), semanticObject.isCheck());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (papername=ID questions+=Question*)
	 */
	protected void sequence_QuestionPaper(EObject context, QuestionPaper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (question=STRING answers+=Answer+)
	 */
	protected void sequence_Question(EObject context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     radio?='radio'
	 */
	protected void sequence_RADIO(EObject context, RADIO semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, LatexQPackage.Literals.RADIO__RADIO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LatexQPackage.Literals.RADIO__RADIO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRADIOAccess().getRadioRadioKeyword_0(), semanticObject.isRadio());
		feeder.finish();
	}
}
