/*
 * generated by Xtext
 */
grammar InternalLatexQ;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.shashwat.xtext.latexQ.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.shashwat.xtext.latexQ.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.shashwat.xtext.latexQ.services.LatexQGrammarAccess;

}

@parser::members {

 	private LatexQGrammarAccess grammarAccess;
 	
    public InternalLatexQParser(TokenStream input, LatexQGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "QuestionPaper";	
   	}
   	
   	@Override
   	protected LatexQGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleQuestionPaper
entryRuleQuestionPaper returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionPaperRule()); }
	 iv_ruleQuestionPaper=ruleQuestionPaper 
	 { $current=$iv_ruleQuestionPaper.current; } 
	 EOF 
;

// Rule QuestionPaper
ruleQuestionPaper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='papername' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuestionPaperAccess().getPapernameKeyword_0());
    }
(
(
		lv_papername_1_0=RULE_ID
		{
			newLeafNode(lv_papername_1_0, grammarAccess.getQuestionPaperAccess().getPapernameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionPaperRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"papername",
        		lv_papername_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionPaperAccess().getQuestionsQuestionParserRuleCall_2_0()); 
	    }
		lv_questions_2_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionPaperRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_2_0, 
        		"org.shashwat.xtext.latexQ.LatexQ.Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Question' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
    }
(
(
		lv_question_1_0=RULE_STRING
		{
			newLeafNode(lv_question_1_0, grammarAccess.getQuestionAccess().getQuestionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"question",
        		lv_question_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"org.shashwat.xtext.latexQ.LatexQ.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionAccess().getAnswersAnswerParserRuleCall_4_0()); 
	    }
		lv_answers_4_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_4_0, 
        		"org.shashwat.xtext.latexQ.LatexQ.Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAnswer
entryRuleAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnswerRule()); }
	 iv_ruleAnswer=ruleAnswer 
	 { $current=$iv_ruleAnswer.current; } 
	 EOF 
;

// Rule Answer
ruleAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Answer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnswerAccess().getAnswerKeyword_0());
    }
(
(
		lv_answer_1_0=RULE_STRING
		{
			newLeafNode(lv_answer_1_0, grammarAccess.getAnswerAccess().getAnswerSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnswerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"answer",
        		lv_answer_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getCHECKParserRuleCall_0()); 
    }
    this_CHECK_0=ruleCHECK
    { 
        $current = $this_CHECK_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getRADIOParserRuleCall_1()); 
    }
    this_RADIO_1=ruleRADIO
    { 
        $current = $this_RADIO_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCHECK
entryRuleCHECK returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCHECKRule()); }
	 iv_ruleCHECK=ruleCHECK 
	 { $current=$iv_ruleCHECK.current; } 
	 EOF 
;

// Rule CHECK
ruleCHECK returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_check_0_0=	'check' 
    {
        newLeafNode(lv_check_0_0, grammarAccess.getCHECKAccess().getCheckCheckKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCHECKRule());
	        }
       		setWithLastConsumed($current, "check", true, "check");
	    }

)
)
;





// Entry rule entryRuleRADIO
entryRuleRADIO returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRADIORule()); }
	 iv_ruleRADIO=ruleRADIO 
	 { $current=$iv_ruleRADIO.current; } 
	 EOF 
;

// Rule RADIO
ruleRADIO returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_radio_0_0=	'radio' 
    {
        newLeafNode(lv_radio_0_0, grammarAccess.getRADIOAccess().getRadioRadioKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRADIORule());
	        }
       		setWithLastConsumed($current, "radio", true, "radio");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


